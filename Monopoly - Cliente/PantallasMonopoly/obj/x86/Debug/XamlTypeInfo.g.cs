//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace PantallasMonopoly
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace PantallasMonopoly.PantallasMonopoly_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[33];
            _typeNameTable[0] = "PantallasMonopoly.AboutMenu";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "PantallasMonopoly.LobbyMenu";
            _typeNameTable[4] = "PantallasMonopoly.CreatePlayer";
            _typeNameTable[5] = "PantallasMonopoly.Views.MainMenu";
            _typeNameTable[6] = "PantallasMonopoly.Models.ComboBoxConverter";
            _typeNameTable[7] = "Object";
            _typeNameTable[8] = "PantallasMonopoly.CreateMenu";
            _typeNameTable[9] = "PantallasMonopoly.ViewModels.searchVM";
            _typeNameTable[10] = "PantallasMonopoly.ViewModels.clsVMBase";
            _typeNameTable[11] = "Microsoft.AspNet.SignalR.Client.HubConnection";
            _typeNameTable[12] = "Microsoft.AspNet.SignalR.Client.Connection";
            _typeNameTable[13] = "Microsoft.AspNet.SignalR.Client.IHubProxy";
            _typeNameTable[14] = "System.Collections.Generic.List`1<PantallasMonopoly.Models.Lobby>";
            _typeNameTable[15] = "PantallasMonopoly.Models.Lobby";
            _typeNameTable[16] = "String";
            _typeNameTable[17] = "Int32";
            _typeNameTable[18] = "System.Collections.Generic.List`1<PantallasMonopoly.Models.Jugador>";
            _typeNameTable[19] = "PantallasMonopoly.Models.Jugador";
            _typeNameTable[20] = "PantallasMonopoly.Models.Ficha";
            _typeNameTable[21] = "Double";
            _typeNameTable[22] = "System.Collections.Generic.List`1<PantallasMonopoly.Models.Propiedad>";
            _typeNameTable[23] = "PantallasMonopoly.Models.Propiedad";
            _typeNameTable[24] = "PantallasMonopoly.Models.Casilla";
            _typeNameTable[25] = "Boolean";
            _typeNameTable[26] = "PantallasMonopoly.Models.Enums.ColorPropiedad";
            _typeNameTable[27] = "System.Enum";
            _typeNameTable[28] = "System.ValueType";
            _typeNameTable[29] = "System.Uri";
            _typeNameTable[30] = "PantallasMonopoly.Models.Enums.TipoCasilla";
            _typeNameTable[31] = "PantallasMonopoly.Models.Partida";
            _typeNameTable[32] = "PantallasMonopoly.SearchMenu";

            _typeTable = new global::System.Type[33];
            _typeTable[0] = typeof(global::PantallasMonopoly.AboutMenu);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::PantallasMonopoly.LobbyMenu);
            _typeTable[4] = typeof(global::PantallasMonopoly.CreatePlayer);
            _typeTable[5] = typeof(global::PantallasMonopoly.Views.MainMenu);
            _typeTable[6] = typeof(global::PantallasMonopoly.Models.ComboBoxConverter);
            _typeTable[7] = typeof(global::System.Object);
            _typeTable[8] = typeof(global::PantallasMonopoly.CreateMenu);
            _typeTable[9] = typeof(global::PantallasMonopoly.ViewModels.searchVM);
            _typeTable[10] = typeof(global::PantallasMonopoly.ViewModels.clsVMBase);
            _typeTable[11] = typeof(global::Microsoft.AspNet.SignalR.Client.HubConnection);
            _typeTable[12] = typeof(global::Microsoft.AspNet.SignalR.Client.Connection);
            _typeTable[13] = typeof(global::Microsoft.AspNet.SignalR.Client.IHubProxy);
            _typeTable[14] = typeof(global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Lobby>);
            _typeTable[15] = typeof(global::PantallasMonopoly.Models.Lobby);
            _typeTable[16] = typeof(global::System.String);
            _typeTable[17] = typeof(global::System.Int32);
            _typeTable[18] = typeof(global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Jugador>);
            _typeTable[19] = typeof(global::PantallasMonopoly.Models.Jugador);
            _typeTable[20] = typeof(global::PantallasMonopoly.Models.Ficha);
            _typeTable[21] = typeof(global::System.Double);
            _typeTable[22] = typeof(global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Propiedad>);
            _typeTable[23] = typeof(global::PantallasMonopoly.Models.Propiedad);
            _typeTable[24] = typeof(global::PantallasMonopoly.Models.Casilla);
            _typeTable[25] = typeof(global::System.Boolean);
            _typeTable[26] = typeof(global::PantallasMonopoly.Models.Enums.ColorPropiedad);
            _typeTable[27] = typeof(global::System.Enum);
            _typeTable[28] = typeof(global::System.ValueType);
            _typeTable[29] = typeof(global::System.Uri);
            _typeTable[30] = typeof(global::PantallasMonopoly.Models.Enums.TipoCasilla);
            _typeTable[31] = typeof(global::PantallasMonopoly.Models.Partida);
            _typeTable[32] = typeof(global::PantallasMonopoly.SearchMenu);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AboutMenu() { return new global::PantallasMonopoly.AboutMenu(); }
        private object Activate_3_LobbyMenu() { return new global::PantallasMonopoly.LobbyMenu(); }
        private object Activate_4_CreatePlayer() { return new global::PantallasMonopoly.CreatePlayer(); }
        private object Activate_5_MainMenu() { return new global::PantallasMonopoly.Views.MainMenu(); }
        private object Activate_6_ComboBoxConverter() { return new global::PantallasMonopoly.Models.ComboBoxConverter(); }
        private object Activate_8_CreateMenu() { return new global::PantallasMonopoly.CreateMenu(); }
        private object Activate_9_searchVM() { return new global::PantallasMonopoly.ViewModels.searchVM(); }
        private object Activate_14_List() { return new global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Lobby>(); }
        private object Activate_15_Lobby() { return new global::PantallasMonopoly.Models.Lobby(); }
        private object Activate_18_List() { return new global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Jugador>(); }
        private object Activate_19_Jugador() { return new global::PantallasMonopoly.Models.Jugador(); }
        private object Activate_20_Ficha() { return new global::PantallasMonopoly.Models.Ficha(); }
        private object Activate_22_List() { return new global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Propiedad>(); }
        private object Activate_24_Casilla() { return new global::PantallasMonopoly.Models.Casilla(); }
        private object Activate_31_Partida() { return new global::PantallasMonopoly.Models.Partida(); }
        private object Activate_32_SearchMenu() { return new global::PantallasMonopoly.SearchMenu(); }
        private void VectorAdd_14_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PantallasMonopoly.Models.Lobby>)instance;
            var newItem = (global::PantallasMonopoly.Models.Lobby)item;
            collection.Add(newItem);
        }
        private void VectorAdd_18_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PantallasMonopoly.Models.Jugador>)instance;
            var newItem = (global::PantallasMonopoly.Models.Jugador)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::PantallasMonopoly.Models.Propiedad>)instance;
            var newItem = (global::PantallasMonopoly.Models.Propiedad)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  PantallasMonopoly.AboutMenu
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_AboutMenu;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  PantallasMonopoly.LobbyMenu
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_LobbyMenu;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  PantallasMonopoly.CreatePlayer
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_4_CreatePlayer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  PantallasMonopoly.Views.MainMenu
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_MainMenu;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  PantallasMonopoly.Models.ComboBoxConverter
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_ComboBoxConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Object
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  PantallasMonopoly.CreateMenu
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_CreateMenu;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  PantallasMonopoly.ViewModels.searchVM
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PantallasMonopoly.ViewModels.clsVMBase"));
                userType.Activator = Activate_9_searchVM;
                userType.AddMemberName("conn");
                userType.AddMemberName("proxy");
                userType.AddMemberName("listadoLobby");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  PantallasMonopoly.ViewModels.clsVMBase
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Microsoft.AspNet.SignalR.Client.HubConnection
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.AspNet.SignalR.Client.Connection"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  Microsoft.AspNet.SignalR.Client.Connection
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Microsoft.AspNet.SignalR.Client.IHubProxy
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  System.Collections.Generic.List`1<PantallasMonopoly.Models.Lobby>
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_14_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  PantallasMonopoly.Models.Lobby
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_Lobby;
                userType.AddMemberName("nombre");
                userType.AddMemberName("contrasena");
                userType.AddMemberName("maxJugadores");
                userType.AddMemberName("listadoJugadores");
                userType.AddMemberName("partidaEmpezada");
                userType.AddMemberName("partida");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  String
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Int32
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  System.Collections.Generic.List`1<PantallasMonopoly.Models.Jugador>
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_18_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  PantallasMonopoly.Models.Jugador
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_Jugador;
                userType.AddMemberName("nombre");
                userType.AddMemberName("ficha");
                userType.AddMemberName("dinero");
                userType.AddMemberName("listadoPropiedades");
                userType.AddMemberName("posicion");
                userType.AddMemberName("carcelGratisSuerte");
                userType.AddMemberName("carcelGratisComunidad");
                userType.AddMemberName("estaEnCarcel");
                userType.AddMemberName("turnosEnCarcel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  PantallasMonopoly.Models.Ficha
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Double
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  System.Collections.Generic.List`1<PantallasMonopoly.Models.Propiedad>
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_22_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  PantallasMonopoly.Models.Propiedad
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("PantallasMonopoly.Models.Casilla"));
                userType.AddMemberName("precio");
                userType.AddMemberName("nCasas");
                userType.AddMemberName("tieneHotel");
                userType.AddMemberName("estaComprado");
                userType.AddMemberName("color");
                userType.AddMemberName("dineroAPagar");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  PantallasMonopoly.Models.Casilla
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_Casilla;
                userType.AddMemberName("imagen");
                userType.AddMemberName("tipo");
                userType.AddMemberName("listadoJugadores");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Boolean
                xamlType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  PantallasMonopoly.Models.Enums.ColorPropiedad
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MARRON", global::PantallasMonopoly.Models.Enums.ColorPropiedad.MARRON);
                userType.AddEnumValue("CELESTE", global::PantallasMonopoly.Models.Enums.ColorPropiedad.CELESTE);
                userType.AddEnumValue("ROSA", global::PantallasMonopoly.Models.Enums.ColorPropiedad.ROSA);
                userType.AddEnumValue("NARANJA", global::PantallasMonopoly.Models.Enums.ColorPropiedad.NARANJA);
                userType.AddEnumValue("ROJO", global::PantallasMonopoly.Models.Enums.ColorPropiedad.ROJO);
                userType.AddEnumValue("AMARILLO", global::PantallasMonopoly.Models.Enums.ColorPropiedad.AMARILLO);
                userType.AddEnumValue("VERDE", global::PantallasMonopoly.Models.Enums.ColorPropiedad.VERDE);
                userType.AddEnumValue("AZUL", global::PantallasMonopoly.Models.Enums.ColorPropiedad.AZUL);
                userType.AddEnumValue("SERVICIO", global::PantallasMonopoly.Models.Enums.ColorPropiedad.SERVICIO);
                userType.AddEnumValue("ESTACION", global::PantallasMonopoly.Models.Enums.ColorPropiedad.ESTACION);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  System.Enum
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 28:   //  System.ValueType
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 29:   //  System.Uri
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  PantallasMonopoly.Models.Enums.TipoCasilla
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("SALIDA", global::PantallasMonopoly.Models.Enums.TipoCasilla.SALIDA);
                userType.AddEnumValue("SUERTE", global::PantallasMonopoly.Models.Enums.TipoCasilla.SUERTE);
                userType.AddEnumValue("COMUNIDAD", global::PantallasMonopoly.Models.Enums.TipoCasilla.COMUNIDAD);
                userType.AddEnumValue("IRALACARCEL", global::PantallasMonopoly.Models.Enums.TipoCasilla.IRALACARCEL);
                userType.AddEnumValue("CARCEL", global::PantallasMonopoly.Models.Enums.TipoCasilla.CARCEL);
                userType.AddEnumValue("IMPUESTOAZURE", global::PantallasMonopoly.Models.Enums.TipoCasilla.IMPUESTOAZURE);
                userType.AddEnumValue("DESCANSO", global::PantallasMonopoly.Models.Enums.TipoCasilla.DESCANSO);
                userType.AddEnumValue("IMPUESTOAPPLE", global::PantallasMonopoly.Models.Enums.TipoCasilla.IMPUESTOAPPLE);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  PantallasMonopoly.Models.Partida
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  PantallasMonopoly.SearchMenu
                userType = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_SearchMenu;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_searchVM_conn(object instance)
        {
            var that = (global::PantallasMonopoly.ViewModels.searchVM)instance;
            return that.conn;
        }
        private void set_0_searchVM_conn(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.ViewModels.searchVM)instance;
            that.conn = (global::Microsoft.AspNet.SignalR.Client.HubConnection)Value;
        }
        private object get_1_searchVM_proxy(object instance)
        {
            var that = (global::PantallasMonopoly.ViewModels.searchVM)instance;
            return that.proxy;
        }
        private void set_1_searchVM_proxy(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.ViewModels.searchVM)instance;
            that.proxy = (global::Microsoft.AspNet.SignalR.Client.IHubProxy)Value;
        }
        private object get_2_searchVM_listadoLobby(object instance)
        {
            var that = (global::PantallasMonopoly.ViewModels.searchVM)instance;
            return that.listadoLobby;
        }
        private void set_2_searchVM_listadoLobby(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.ViewModels.searchVM)instance;
            that.listadoLobby = (global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Lobby>)Value;
        }
        private object get_3_Lobby_nombre(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            return that.nombre;
        }
        private void set_3_Lobby_nombre(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            that.nombre = (global::System.String)Value;
        }
        private object get_4_Lobby_contrasena(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            return that.contrasena;
        }
        private void set_4_Lobby_contrasena(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            that.contrasena = (global::System.String)Value;
        }
        private object get_5_Lobby_maxJugadores(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            return that.maxJugadores;
        }
        private void set_5_Lobby_maxJugadores(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            that.maxJugadores = (global::System.Int32)Value;
        }
        private object get_6_Lobby_listadoJugadores(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            return that.listadoJugadores;
        }
        private void set_6_Lobby_listadoJugadores(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            that.listadoJugadores = (global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Jugador>)Value;
        }
        private object get_7_Jugador_nombre(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.nombre;
        }
        private void set_7_Jugador_nombre(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.nombre = (global::System.String)Value;
        }
        private object get_8_Jugador_ficha(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.ficha;
        }
        private void set_8_Jugador_ficha(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.ficha = (global::PantallasMonopoly.Models.Ficha)Value;
        }
        private object get_9_Jugador_dinero(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.dinero;
        }
        private void set_9_Jugador_dinero(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.dinero = (global::System.Double)Value;
        }
        private object get_10_Jugador_listadoPropiedades(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.listadoPropiedades;
        }
        private void set_10_Jugador_listadoPropiedades(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.listadoPropiedades = (global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Propiedad>)Value;
        }
        private object get_11_Propiedad_precio(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            return that.precio;
        }
        private void set_11_Propiedad_precio(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            that.precio = (global::System.Int32)Value;
        }
        private object get_12_Propiedad_nCasas(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            return that.nCasas;
        }
        private void set_12_Propiedad_nCasas(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            that.nCasas = (global::System.Int32)Value;
        }
        private object get_13_Propiedad_tieneHotel(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            return that.tieneHotel;
        }
        private void set_13_Propiedad_tieneHotel(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            that.tieneHotel = (global::System.Boolean)Value;
        }
        private object get_14_Propiedad_estaComprado(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            return that.estaComprado;
        }
        private void set_14_Propiedad_estaComprado(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            that.estaComprado = (global::System.Boolean)Value;
        }
        private object get_15_Propiedad_color(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            return that.color;
        }
        private void set_15_Propiedad_color(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            that.color = (global::PantallasMonopoly.Models.Enums.ColorPropiedad)Value;
        }
        private object get_16_Propiedad_dineroAPagar(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            return that.dineroAPagar;
        }
        private void set_16_Propiedad_dineroAPagar(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Propiedad)instance;
            that.dineroAPagar = (global::System.Int32)Value;
        }
        private object get_17_Casilla_imagen(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Casilla)instance;
            return that.imagen;
        }
        private void set_17_Casilla_imagen(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Casilla)instance;
            that.imagen = (global::System.Uri)Value;
        }
        private object get_18_Casilla_tipo(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Casilla)instance;
            return that.tipo;
        }
        private void set_18_Casilla_tipo(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Casilla)instance;
            that.tipo = (global::PantallasMonopoly.Models.Enums.TipoCasilla)Value;
        }
        private object get_19_Casilla_listadoJugadores(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Casilla)instance;
            return that.listadoJugadores;
        }
        private void set_19_Casilla_listadoJugadores(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Casilla)instance;
            that.listadoJugadores = (global::System.Collections.Generic.List<global::PantallasMonopoly.Models.Jugador>)Value;
        }
        private object get_20_Jugador_posicion(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.posicion;
        }
        private void set_20_Jugador_posicion(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.posicion = (global::System.Int32)Value;
        }
        private object get_21_Jugador_carcelGratisSuerte(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.carcelGratisSuerte;
        }
        private void set_21_Jugador_carcelGratisSuerte(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.carcelGratisSuerte = (global::System.Boolean)Value;
        }
        private object get_22_Jugador_carcelGratisComunidad(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.carcelGratisComunidad;
        }
        private void set_22_Jugador_carcelGratisComunidad(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.carcelGratisComunidad = (global::System.Boolean)Value;
        }
        private object get_23_Jugador_estaEnCarcel(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.estaEnCarcel;
        }
        private void set_23_Jugador_estaEnCarcel(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.estaEnCarcel = (global::System.Boolean)Value;
        }
        private object get_24_Jugador_turnosEnCarcel(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            return that.turnosEnCarcel;
        }
        private void set_24_Jugador_turnosEnCarcel(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Jugador)instance;
            that.turnosEnCarcel = (global::System.Int32)Value;
        }
        private object get_25_Lobby_partidaEmpezada(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            return that.partidaEmpezada;
        }
        private void set_25_Lobby_partidaEmpezada(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            that.partidaEmpezada = (global::System.Boolean)Value;
        }
        private object get_26_Lobby_partida(object instance)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            return that.partida;
        }
        private void set_26_Lobby_partida(object instance, object Value)
        {
            var that = (global::PantallasMonopoly.Models.Lobby)instance;
            that.partida = (global::PantallasMonopoly.Models.Partida)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember xamlMember = null;
            global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "PantallasMonopoly.ViewModels.searchVM.conn":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.ViewModels.searchVM");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "conn", "Microsoft.AspNet.SignalR.Client.HubConnection");
                xamlMember.Getter = get_0_searchVM_conn;
                xamlMember.Setter = set_0_searchVM_conn;
                break;
            case "PantallasMonopoly.ViewModels.searchVM.proxy":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.ViewModels.searchVM");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "proxy", "Microsoft.AspNet.SignalR.Client.IHubProxy");
                xamlMember.Getter = get_1_searchVM_proxy;
                xamlMember.Setter = set_1_searchVM_proxy;
                break;
            case "PantallasMonopoly.ViewModels.searchVM.listadoLobby":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.ViewModels.searchVM");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "listadoLobby", "System.Collections.Generic.List`1<PantallasMonopoly.Models.Lobby>");
                xamlMember.Getter = get_2_searchVM_listadoLobby;
                xamlMember.Setter = set_2_searchVM_listadoLobby;
                break;
            case "PantallasMonopoly.Models.Lobby.nombre":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Lobby");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "nombre", "String");
                xamlMember.Getter = get_3_Lobby_nombre;
                xamlMember.Setter = set_3_Lobby_nombre;
                break;
            case "PantallasMonopoly.Models.Lobby.contrasena":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Lobby");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "contrasena", "String");
                xamlMember.Getter = get_4_Lobby_contrasena;
                xamlMember.Setter = set_4_Lobby_contrasena;
                break;
            case "PantallasMonopoly.Models.Lobby.maxJugadores":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Lobby");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "maxJugadores", "Int32");
                xamlMember.Getter = get_5_Lobby_maxJugadores;
                xamlMember.Setter = set_5_Lobby_maxJugadores;
                break;
            case "PantallasMonopoly.Models.Lobby.listadoJugadores":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Lobby");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "listadoJugadores", "System.Collections.Generic.List`1<PantallasMonopoly.Models.Jugador>");
                xamlMember.Getter = get_6_Lobby_listadoJugadores;
                xamlMember.Setter = set_6_Lobby_listadoJugadores;
                break;
            case "PantallasMonopoly.Models.Jugador.nombre":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "nombre", "String");
                xamlMember.Getter = get_7_Jugador_nombre;
                xamlMember.Setter = set_7_Jugador_nombre;
                break;
            case "PantallasMonopoly.Models.Jugador.ficha":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "ficha", "PantallasMonopoly.Models.Ficha");
                xamlMember.Getter = get_8_Jugador_ficha;
                xamlMember.Setter = set_8_Jugador_ficha;
                break;
            case "PantallasMonopoly.Models.Jugador.dinero":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "dinero", "Double");
                xamlMember.Getter = get_9_Jugador_dinero;
                xamlMember.Setter = set_9_Jugador_dinero;
                break;
            case "PantallasMonopoly.Models.Jugador.listadoPropiedades":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "listadoPropiedades", "System.Collections.Generic.List`1<PantallasMonopoly.Models.Propiedad>");
                xamlMember.Getter = get_10_Jugador_listadoPropiedades;
                xamlMember.Setter = set_10_Jugador_listadoPropiedades;
                break;
            case "PantallasMonopoly.Models.Propiedad.precio":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Propiedad");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "precio", "Int32");
                xamlMember.Getter = get_11_Propiedad_precio;
                xamlMember.Setter = set_11_Propiedad_precio;
                break;
            case "PantallasMonopoly.Models.Propiedad.nCasas":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Propiedad");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "nCasas", "Int32");
                xamlMember.Getter = get_12_Propiedad_nCasas;
                xamlMember.Setter = set_12_Propiedad_nCasas;
                break;
            case "PantallasMonopoly.Models.Propiedad.tieneHotel":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Propiedad");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "tieneHotel", "Boolean");
                xamlMember.Getter = get_13_Propiedad_tieneHotel;
                xamlMember.Setter = set_13_Propiedad_tieneHotel;
                break;
            case "PantallasMonopoly.Models.Propiedad.estaComprado":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Propiedad");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "estaComprado", "Boolean");
                xamlMember.Getter = get_14_Propiedad_estaComprado;
                xamlMember.Setter = set_14_Propiedad_estaComprado;
                break;
            case "PantallasMonopoly.Models.Propiedad.color":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Propiedad");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "color", "PantallasMonopoly.Models.Enums.ColorPropiedad");
                xamlMember.Getter = get_15_Propiedad_color;
                xamlMember.Setter = set_15_Propiedad_color;
                break;
            case "PantallasMonopoly.Models.Propiedad.dineroAPagar":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Propiedad");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "dineroAPagar", "Int32");
                xamlMember.Getter = get_16_Propiedad_dineroAPagar;
                xamlMember.Setter = set_16_Propiedad_dineroAPagar;
                break;
            case "PantallasMonopoly.Models.Casilla.imagen":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Casilla");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "imagen", "System.Uri");
                xamlMember.Getter = get_17_Casilla_imagen;
                xamlMember.Setter = set_17_Casilla_imagen;
                break;
            case "PantallasMonopoly.Models.Casilla.tipo":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Casilla");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "tipo", "PantallasMonopoly.Models.Enums.TipoCasilla");
                xamlMember.Getter = get_18_Casilla_tipo;
                xamlMember.Setter = set_18_Casilla_tipo;
                break;
            case "PantallasMonopoly.Models.Casilla.listadoJugadores":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Casilla");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "listadoJugadores", "System.Collections.Generic.List`1<PantallasMonopoly.Models.Jugador>");
                xamlMember.Getter = get_19_Casilla_listadoJugadores;
                xamlMember.Setter = set_19_Casilla_listadoJugadores;
                break;
            case "PantallasMonopoly.Models.Jugador.posicion":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "posicion", "Int32");
                xamlMember.Getter = get_20_Jugador_posicion;
                xamlMember.Setter = set_20_Jugador_posicion;
                break;
            case "PantallasMonopoly.Models.Jugador.carcelGratisSuerte":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "carcelGratisSuerte", "Boolean");
                xamlMember.Getter = get_21_Jugador_carcelGratisSuerte;
                xamlMember.Setter = set_21_Jugador_carcelGratisSuerte;
                break;
            case "PantallasMonopoly.Models.Jugador.carcelGratisComunidad":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "carcelGratisComunidad", "Boolean");
                xamlMember.Getter = get_22_Jugador_carcelGratisComunidad;
                xamlMember.Setter = set_22_Jugador_carcelGratisComunidad;
                break;
            case "PantallasMonopoly.Models.Jugador.estaEnCarcel":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "estaEnCarcel", "Boolean");
                xamlMember.Getter = get_23_Jugador_estaEnCarcel;
                xamlMember.Setter = set_23_Jugador_estaEnCarcel;
                break;
            case "PantallasMonopoly.Models.Jugador.turnosEnCarcel":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Jugador");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "turnosEnCarcel", "Int32");
                xamlMember.Getter = get_24_Jugador_turnosEnCarcel;
                xamlMember.Setter = set_24_Jugador_turnosEnCarcel;
                break;
            case "PantallasMonopoly.Models.Lobby.partidaEmpezada":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Lobby");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "partidaEmpezada", "Boolean");
                xamlMember.Getter = get_25_Lobby_partidaEmpezada;
                xamlMember.Setter = set_25_Lobby_partidaEmpezada;
                break;
            case "PantallasMonopoly.Models.Lobby.partida":
                userType = (global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PantallasMonopoly.Models.Lobby");
                xamlMember = new global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlMember(this, "partida", "PantallasMonopoly.Models.Partida");
                xamlMember.Getter = get_26_Lobby_partida;
                xamlMember.Setter = set_26_Lobby_partida;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlSystemBaseType
    {
        global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::PantallasMonopoly.PantallasMonopoly_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

